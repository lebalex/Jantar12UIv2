package jantar12ui;

import jantar12ui.results.CreateResultsDialog;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeSelectionModel;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import paneljantar.*;
import paneljantar.interval.*;

/**
 *
 * @author LebAlex
 */
public class Jantar12UI extends javax.swing.JFrame {
    public static final Logger logger_job = Logger.getLogger(Jantar12UI.class);
    private ScenClass selectedScenClass;
    private String selectedNode;
    private List<PanelInterface> listPanelInterface = new ArrayList<PanelInterface>();
    private ExtNameClass extNameClass;
    private ProgressRunJDialog progressRun;

    /**
     * Creates new form Jantar12UI
     */
    public Jantar12UI() {
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        //setBounds(0,0,screenSize.width, screenSize.height-30);
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);  
        extNameClass = new ExtNameClass();
        TreeNode treeNode = new TreeNode(LoadData.getPathJantar12(), extNameClass);
        

        TreeModel treeModel = new DefaultTreeModel(treeNode.ctreateTree());
        jTree1.setModel(treeModel);
        jTree1.getSelectionModel().setSelectionMode
            (TreeSelectionModel.SINGLE_TREE_SELECTION);
        jSplitPane1.setDividerLocation(250);
        
        

    }

    public JDialog getProgressRun() {
        return progressRun;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        CreateMenuItem = new javax.swing.JMenuItem();
        delProjectMenuItem = new javax.swing.JMenuItem();
        runMenuItem = new javax.swing.JMenuItem();
        resultMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        optionMenu = new javax.swing.JMenu();
        jMenuParam1 = new javax.swing.JMenuItem();
        jMenuParam2 = new javax.swing.JMenuItem();
        jMenuParam3 = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        jMenuCopy = new javax.swing.JMenuItem();
        jMenuPaste = new javax.swing.JMenuItem();
        jMenuCut = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Jantar Java UI от 06.02.2018");

        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setViewportView(jTabbedPane1);

        jSplitPane1.setRightComponent(jScrollPane2);

        jToolBar1.setRollover(true);

        jButton1.setText("Сохранить");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Проект");

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Сохранить файл");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Сохранить проект как ...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        CreateMenuItem.setText("Создать новый проект");
        CreateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(CreateMenuItem);

        delProjectMenuItem.setText("Удалить проект");
        delProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(delProjectMenuItem);

        runMenuItem.setText("Расчет");
        runMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(runMenuItem);

        resultMenuItem.setText("Обработать результаты");
        resultMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(resultMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Выход");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        optionMenu.setMnemonic('e');
        optionMenu.setText("Опции");

        jMenuParam1.setText("Расшифровка столбцов");
        jMenuParam1.setActionCommand("");
        jMenuParam1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuParam1ActionPerformed(evt);
            }
        });
        optionMenu.add(jMenuParam1);

        jMenuParam2.setText("Расшифровка таблиц");
        jMenuParam2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuParam2ActionPerformed(evt);
            }
        });
        optionMenu.add(jMenuParam2);

        jMenuParam3.setText("Структура данных");
        jMenuParam3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuParam3ActionPerformed(evt);
            }
        });
        optionMenu.add(jMenuParam3);

        menuBar.add(optionMenu);

        editMenu.setText("Редактировать");

        jMenuCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuCopy.setText("Копировать");
        jMenuCopy.setActionCommand("Copy");
        jMenuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCopyActionPerformed(evt);
            }
        });
        editMenu.add(jMenuCopy);

        jMenuPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuPaste.setText("Вставить");
        jMenuPaste.setActionCommand("Paste");
        jMenuPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPasteActionPerformed(evt);
            }
        });
        editMenu.add(jMenuPaste);

        jMenuCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuCut.setText("Вырезать");
        jMenuCut.setActionCommand("Cut");
        jMenuCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCutActionPerformed(evt);
            }
        });
        editMenu.add(jMenuCut);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Помощь");

        helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpMenuItem.setText("Помощь");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("О Программе");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                       jTree1.getLastSelectedPathComponent();

        if (node == null)
            return;
        selectedNode="";
        if(!node.isRoot()){
        do
        {
            Object nodeInfo = node.getUserObject();
            if(nodeInfo instanceof ScenClass){
                selectedNode = ((ScenClass)nodeInfo).getName()+"."+selectedNode;
                selectedScenClass = (ScenClass)nodeInfo;
            }else
            selectedNode =  nodeInfo.toString()+"."+selectedNode;
            node = (DefaultMutableTreeNode)node.getParent();
        }while(node.getParent()!=null);
        }else return;
       if(evt.getClickCount()==2){
            selectedNode = selectedNode.substring(0, selectedNode.length()-1);
            String[] listIDX = selectedNode.split("\\.");
            if((listIDX.length==2 && selectedNode.indexOf("Interv")==-1) || listIDX.length==3)
            {
                //jTabbedPane1.add(selectedNode, new JLabel(selectedNode));
                if(selectedNode.indexOf("Interv")!=-1)
                {
                    String[] temp = selectedNode.split("\\.");
                    selectedNode = temp[1]+"/"+temp[0]+"."+temp[2];
                }
                boolean sel=false;
                for(int n=0; n<jTabbedPane1.getTabCount(); n++)
                {
                    if(jTabbedPane1.getTitleAt(n).equalsIgnoreCase(selectedNode)){
                        jTabbedPane1.setSelectedIndex(n);
                        sel=true;
                    }
                }
                if(!sel){
                PanelInterface panelClass = null;
                if(listIDX[listIDX.length-1].equalsIgnoreCase("SXM")){
                    panelClass = new SXMClass(jTabbedPane1);
                    panelClass.setJantar12UI(this);
                }else if(listIDX[listIDX.length-1].equalsIgnoreCase("NAM"))
                    panelClass = new NAMClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("HGN"))
                    panelClass = new HGNClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("YZL"))
                    panelClass = new YZLClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("NGR"))
                    panelClass = new NGRClass(jTabbedPane1);
                /*else if(listIDX[listIDX.length-1].equalsIgnoreCase("VEC"))
                    panelClass = new VECClass(jTabbedPane1);
                */else if(listIDX[listIDX.length-1].equalsIgnoreCase("ENX"))
                    panelClass = new ENXClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("IDD"))
                    panelClass = new IDDClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("KDD"))
                    panelClass = new KDDClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("HNG"))
                    panelClass = new HNGClass(jTabbedPane1);
                /*else if(listIDX[listIDX.length-1].equalsIgnoreCase("AJO"))
                    panelClass = new AJOClass(jTabbedPane1);
                */else if(listIDX[listIDX.length-1].equalsIgnoreCase("AGR"))
                    panelClass = new AGRClass(jTabbedPane1);
                /*else if(listIDX[listIDX.length-1].equalsIgnoreCase("IZL"))
                    panelClass = new IZLClass(jTabbedPane1);
                */else if(listIDX[listIDX.length-1].equalsIgnoreCase("LIN"))
                    panelClass = new LINClass(jTabbedPane1);
                /*else if(listIDX[listIDX.length-1].equalsIgnoreCase("NRR"))
                    panelClass = new NRRClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("NCR"))
                    panelClass = new NCRClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("KRR"))
                    panelClass = new KRRClass(jTabbedPane1);
                */else if(listIDX[listIDX.length-1].equalsIgnoreCase("AZR"))
                    panelClass = new AZRClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("VYZ"))
                    panelClass = new VYZClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("KCR"))
                    panelClass = new KCRClass(jTabbedPane1);
                else if(listIDX[listIDX.length-1].equalsIgnoreCase("VSV"))
                    panelClass = new VSVClass(jTabbedPane1);
                
                if(panelClass!=null)
                {
                    jTabbedPane1.add(selectedNode, panelClass.getPanel(selectedNode));
                    int tabCount = jTabbedPane1.getTabCount()-1;
                    listPanelInterface.add(panelClass);
                    jTabbedPane1.setTabComponentAt(tabCount, new ButtonTabComponent(jTabbedPane1, this));
                    jTabbedPane1.setSelectedIndex(tabCount);
                }
                }
            }
       
       }
    }//GEN-LAST:event_jTree1MouseClicked

    public boolean isEdit()
    {
        if(((ButtonTabComponent)jTabbedPane1.getTabComponentAt(jTabbedPane1.getSelectedIndex())).isEdit()) 
        {
            //вопрос на сохранение
            if(JOptionPane.showConfirmDialog(this, "Сохранить файл "+((ButtonTabComponent)jTabbedPane1.getTabComponentAt(jTabbedPane1.getSelectedIndex())).getTitle()+"?", "Сохранить файл?", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
            {
                jButton1ActionPerformed(null);
                 return false;
            }else  return false;
        } else return false;
    }
    public void removePanelClass(int jTabbedPaneIndex)
    {
        listPanelInterface.remove(jTabbedPaneIndex);
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // сохранить активный tab
        try {
            //int index = Collections.binarySearch(list
            PanelInterface panelClass = (PanelInterface)listPanelInterface.get(jTabbedPane1.getSelectedIndex());
            if(panelClass!=null)
                panelClass.saveValue();

        } catch (Exception e) {
            logger_job.log(Level.ERROR, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        jButton1ActionPerformed(evt);
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // сохранить проект как
        if(selectedScenClass!=null)
        {
            NewProjectlDialog newProjectlDialog = new NewProjectlDialog(this, true);
            newProjectlDialog.setVisible(true);
            if(newProjectlDialog.getReturnStatus()==1)
            {
                CopyProjectClass copyProjectClass = new CopyProjectClass();
                if(copyProjectClass.copyProject(newProjectlDialog.getNameTextField().getText(), newProjectlDialog.getDiscriptTextField().getText(), selectedScenClass, LoadData.getPathJantar12()))
                {
                    TreeNode treeNode = new TreeNode(LoadData.getPathJantar12(), extNameClass);
                    TreeModel treeModel = new DefaultTreeModel(treeNode.ctreateTree());
                    jTree1.setModel(treeModel);
                    JOptionPane.showMessageDialog(this, "Проект сохранен как "+newProjectlDialog.getDiscriptTextField().getText(), "Сообщение", 1);
                }
            }
        }
        
    }//GEN-LAST:event_saveAsMenuItemActionPerformed
    private void runMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMenuItemActionPerformed
        // запустить проект11
        if(selectedScenClass!=null)
        {
            RunOptimus runOptimus = new RunOptimus(this, selectedScenClass);
            runOptimus.start();
            Rectangle r = this.getBounds();
            progressRun = new ProgressRunJDialog(this, true);
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize(); 
            //center int x = r.x + (r.width - progressRun.getSize().width)/2;
            //center int y = r.y + (r.height - progressRun.getSize().height)/2;
            //rigth app int x = (r.width - progressRun.getSize().width) + r.x-10;
            //rigth app int y = (r.height - progressRun.getSize().height) + r.y-10;
            int x = (dim.width - progressRun.getSize().width) -5;
            int y = (dim.height - progressRun.getSize().height) -30;
            progressRun.setLocation(x, y);
            progressRun.setVisible(true);  
        

        }else
        {
            JOptionPane.showMessageDialog(this, "Не выбран проект!", "Ошибка", 1);
        }
    }//GEN-LAST:event_runMenuItemActionPerformed
    public void stopRunOptimus()
    {
        /*проверим файл err*/
        String errContext = LoadData.getFile(LoadData.getPathJantar12() + "Result/"+selectedScenClass.getName()+".err");
        if(errContext.length()>0)
        {
            if(JOptionPane.showConfirmDialog(this, "Имеются ошибки при расчете "+selectedScenClass.getDescript()+". Вывести окно с ошибками?", "Ошибки при проведении расчета", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
            {
                PropEditDialog propEditDialog = new PropEditDialog(null, true);
                propEditDialog.setDescript("Ошибки при проведении расчета", errContext, true);
                propEditDialog.setVisible(true);
            }
        }else{
        
            if(JOptionPane.showConfirmDialog(this, "Запустить обработку результатов "+selectedScenClass.getDescript(), "Запустить обработку результатов", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
            {
                resultMenuItemActionPerformed(null);
            }
        }
    }
    /*private String readErrFile()
    {
        String errContext = LoadData.getFile(LoadData.getPathJantar12() + "Result/"+selectedScenClass.getName()+".err");
    }*/
    
    private void delProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delProjectMenuItemActionPerformed
        // удалить проект
        if(selectedScenClass!=null)
        {
            if(JOptionPane.showConfirmDialog(this, "Удалить проект "+selectedScenClass.getDescript(), "Удалить проект", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
            {
                CopyProjectClass copyProjectClass = new CopyProjectClass();
                if(copyProjectClass.deleteProject(selectedScenClass, LoadData.getPathJantar12()))
                {
                    TreeNode treeNode = new TreeNode(LoadData.getPathJantar12(), extNameClass);
                    TreeModel treeModel = new DefaultTreeModel(treeNode.ctreateTree());
                    jTree1.setModel(treeModel);
                    JOptionPane.showMessageDialog(this, "Проект удален", "Сообщение", 1);
                }
                    
            }
        }
    }//GEN-LAST:event_delProjectMenuItemActionPerformed

    public void refreshTree()
    {
        TreeNode treeNode = new TreeNode(LoadData.getPathJantar12(), extNameClass);
        TreeModel treeModel = new DefaultTreeModel(treeNode.ctreateTree());
        jTree1.setModel(treeModel);
    }
    private void CreateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateMenuItemActionPerformed
        // TODO add your handling code here:
        NewProjectlDialog newProjectlDialog = new NewProjectlDialog(this, true);
            newProjectlDialog.setVisible(true);
            if(newProjectlDialog.getReturnStatus()==1)
            {
                CreateProjectClass createProjectClass = new CreateProjectClass();
                if(createProjectClass.createProject(newProjectlDialog.getNameTextField().getText(), newProjectlDialog.getDiscriptTextField().getText(), LoadData.getPathJantar12()))
                {
                    TreeNode treeNode = new TreeNode(LoadData.getPathJantar12(), extNameClass);
                    TreeModel treeModel = new DefaultTreeModel(treeNode.ctreateTree());
                    jTree1.setModel(treeModel);
                    JOptionPane.showMessageDialog(this, "Проект сохранен как "+newProjectlDialog.getDiscriptTextField().getText(), "Сообщение", 1);
                }
            }
    }//GEN-LAST:event_CreateMenuItemActionPerformed

    private void jMenuParam1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuParam1ActionPerformed
        // TODO add your handling code here:
        PropEditDialog propEditDialog = new PropEditDialog(null, true);
            propEditDialog.setDescript(LoadData.getLocDescriptFileName(), LoadData.getFile(LoadData.getLocDescriptFileName()), false);
            propEditDialog.setVisible(true);
    }//GEN-LAST:event_jMenuParam1ActionPerformed

    private void jMenuParam2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuParam2ActionPerformed
        // TODO add your handling code here:
        PropEditDialog propEditDialog = new PropEditDialog(null, true);
            propEditDialog.setDescript(LoadData.getLocFileName(), LoadData.getFile(LoadData.getLocFileName()), false);
            propEditDialog.setVisible(true);
    }//GEN-LAST:event_jMenuParam2ActionPerformed

    private void jMenuParam3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuParam3ActionPerformed
        // TODO add your handling code here:
        PropEditDialog propEditDialog = new PropEditDialog(null, true);
            propEditDialog.setDescript(LoadData.getTitlesFileName(), LoadData.getFile(LoadData.getTitlesFileName()), false);
            propEditDialog.setVisible(true);
    }//GEN-LAST:event_jMenuParam3ActionPerformed

    private void EditAction(java.awt.event.ActionEvent evt)
    {
        PanelInterface panelClass = (PanelInterface)listPanelInterface.get(jTabbedPane1.getSelectedIndex());
            if(panelClass!=null){
                panelClass.getMyAd().actionPerformed(evt);
            }
        
    }
    private void jMenuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCopyActionPerformed
        // TODO add your handling code here:
        EditAction(evt);
    }//GEN-LAST:event_jMenuCopyActionPerformed

    private void jMenuPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPasteActionPerformed
        // TODO add your handling code here:
        EditAction(evt);
    }//GEN-LAST:event_jMenuPasteActionPerformed

    private void jMenuCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCutActionPerformed
        // TODO add your handling code here:
        EditAction(evt);
    }//GEN-LAST:event_jMenuCutActionPerformed

    private void resultMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultMenuItemActionPerformed
        // TODO add your handling code here:
        if(selectedScenClass!=null)
        {
            CreateResultsDialog createResultsDialog = new CreateResultsDialog(null, true);
            createResultsDialog.setMainParam(selectedScenClass, selectedNode);
            createResultsDialog.setVisible(true);
        }
    }//GEN-LAST:event_resultMenuItemActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        // TODO add your handling code here:
        try{
            Process process = Runtime.getRuntime().exec("cmd /C start "+LoadData.getAppPath()+"/help.doc");
        }catch(Exception e)
        {
            logger_job.log(Level.ERROR, e);
        }
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        try{
            Process process = Runtime.getRuntime().exec("cmd /C start "+LoadData.getAppPath()+"/about.doc");
        }catch(Exception e)
        {
            logger_job.log(Level.ERROR, e);
        }
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Jantar12UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Jantar12UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Jantar12UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Jantar12UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Jantar12UI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CreateMenuItem;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem delProjectMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuItem jMenuCopy;
    private javax.swing.JMenuItem jMenuCut;
    private javax.swing.JMenuItem jMenuParam1;
    private javax.swing.JMenuItem jMenuParam2;
    private javax.swing.JMenuItem jMenuParam3;
    private javax.swing.JMenuItem jMenuPaste;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu optionMenu;
    private javax.swing.JMenuItem resultMenuItem;
    private javax.swing.JMenuItem runMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
}
